version: "3.6"

networks:
    monitor:
        driver: bridge

services:
    opa-bundle: # bundle
        depends_on:
            - demo-server
        image: openpolicyagent/opa:latest
        container_name: opa-bundle
        hostname: opa-bundle
        restart: always
        volumes:
            - ./opa/config-bundle.yaml:/code/config-bundle.yaml
        ports:
            - "8181:8181"
        networks:
            - monitor
        command: run --server -a :8181 --config-file /code/config-bundle.yaml
    opa-discovery:
        depends_on:
            - demo-server
        image: openpolicyagent/opa:latest
        container_name: opa-discovery
        hostname: opa-discovery
        restart: always
        volumes:
            - ./opa/config-discovery.yaml:/code/config-discovery.yaml
        ports:
            - "8182:8182"
        networks:
            - monitor
        command: run --server -a :8182 --config-file /code/config-discovery.yaml
    demo-server:
        image: golang:1.14-alpine
        container_name: golang
        restart: always
        volumes:
            - ./demo-server:/code
        ports:
            - "8888:8888"
        networks:
            - monitor
        working_dir: /code
        command: go run main.go
    prometheus: # collecting opa-bundle and other metrics
        image: prom/prometheus
        container_name: prometheus
        hostname: prometheus
        restart: always
        volumes:
            - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
            - ./prometheus/rules/:/etc/prometheus/rules/
        ports:
            - "9090:9090"
        networks:
            - monitor
    grafana: # GUI of prometheus
        depends_on:
            - prometheus
        image: grafana/grafana
        container_name: grafana
        hostname: grafana
        restart: always
        ports:
            - "3000:3000"
        networks:
            - monitor

    # some addition config
    node-exporter: # collecting host hardware and operating system data
        image: quay.io/prometheus/node-exporter
        container_name: node-exporter
        hostname: node-exporter
        restart: always
        ports:
            - "9100:9100"
        networks:
            - monitor
    cadvisor: # collecting container data
        image: google/cadvisor:latest
        container_name: cadvisor
        hostname: cadvisor
        restart: always
        privileged: true #https://github.com/google/cadvisor/issues/2150
        volumes:
            - /:/rootfs:ro
            - /var/run:/var/run:rw
            - /sys:/sys:ro
            - /var/lib/docker/:/var/lib/docker:ro
        ports:
            - "8080:8080"
        networks:
            - monitor
    alertmanager: # Responsible for the alarm
        image: prom/alertmanager
        container_name: alertmanager
        hostname: alertmanager
        restart: always
        volumes:
            - ./prometheus/alertmanager.yml:/etc/alertmanager/alertmanager.yml
        ports:
            - "9093:9093"
        networks:
            - monitor
